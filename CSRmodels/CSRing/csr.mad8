! File in Uebereinstimmung mit COSYINFINITY
! CSR_hf_mai_2005.fox
!
! M. G. Januar 2011
! 
!
 assign,echo=echo.txt
 assign,print=erg.txt
 !
  title, s=" CSR    "
!
! Dispersion o. k.
! Alphaparameter 0. k
! d. h. in Uebereinstimmung mit cosy infinity !!!!
!
!

!----------------
!-----String  Definitionen----------------------

 sigx:string,"x+sqrt(emmix*betx)"
 sigy:string,"y+sqrt(emmiy*bety)"
 xenv:string,"sqrt(emmix*betx+(DX*DELPP)^2)"
 d:string,"DX*Beta"
!-----------------------------------------------
!
!
!---INPUT
!
!
! E=20 keV Proton

ENERGY:= 0.02/1000 ! Energie in GeV
MASSE0:=0.9385 ! Masse

EGES:=MASSE0+ENERGY
GAMMA:=EGES/MASSE0
BETA:=SQRT(1-1/(GAMMA*GAMMA))
VALUE, GAMMA
VALUE, BETA

Ekin_classisch:=0.5*masse0*1E6*beta*beta
VALUE,Ekin_classisch

!
!
 BEAM,MASS=MASSE,ENERGY=EGES,CHARGE=1
!
!
!
emmix:=100E-6       ! definiert ueber 2 sigma
emmiy:=100e-6       ! definiert ueber 2 sigma
DELPP:=0.01*BETA  ! 2 sigma Wert von Deltap_p
!
!+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
! Cylinder Deflector
!-------------------
!
RHO:=1
LD:=(RHO*pi/180)*39/10
!
! Input
!------------------
! LD - Path length
! rho-radius
!
! BETA - velocity
! gamma-E/mc**2

!------------------
!

  RK:=SQRT(2.)/RHO
  DISP:=2./RHO

 DEFLECTOR_SEC :  MATRIX, L=LD, RM(1,1)=COS(RK*LD),&
                RM(1,2)=(SIN(RK*LD))/RK, &
                RM(1,6)=(1-COS(RK*LD))*DISP/RK/RK/BETA, &
                RM(2,1)=-SIN(RK*LD)*RK, RM(2,2)=COS(RK*LD), &
                RM(2,6)=SIN(RK*LD)*DISP/RK/BETA, &
                RM(3,3)=1, RM(3,4)=LD, &
                RM(4,3)=0, RM(4,4)=1, &
                RM(5,1)=-SIN(RK*LD)*DISP/RK/BETA, &
                RM(5,2)=-(1-COS(RK*LD))*DISP/RK/RK/BETA, &
                RM(5,5)=1.0, &
                RM(5,6)=(-(LD-SIN(RK*LD)/RK)*DISP*DISP/RK/RK+ &
                LD/GAMMA/GAMMA)/BETA/BETA, &
                RM(6,6)=1.0
 a: vkicker
 DEFLECTOR: line(a,10*(DEFLECTOR_SEC,a))
  
 h1: hkick,kick=0.1*3.14/180

! Deflektor mit Feld Fehler

 Deflektor_f: Line(a,5*(DEFLECTOR_SEC,a),h1,5*(DEFLECTOR_SEC,a))

!-------------------------------------------------------
!
!
!+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
! Cylinder Deflector_k
!-------------------
!
RHO_K:=2
LD_K:=(RHO_K*pi/180)*6/5
!
! Input
!------------------
! LD_K - Path length
! RHO_K-radius
!
! BETA - velocity
! gamma-E/mc**2

!------------------
!

  RK_K:=SQRT(2.)/RHO_K
  DISP_K:=(2.)/RHO_K

 DEFLECTOR_K_SEC :  MATRIX, L=LD_K, RM(1,1)=COS(RK_K*LD_K),&
  RM(1,2)=(SIN(RK_K*LD_K))/RK_K, &
  RM(1,6)=(1-COS(RK_K*LD_K))*DISP_K/RK_K/RK_K/BETA, &
  RM(2,1)=-SIN(RK_K*LD_K)*RK_K, RM(2,2)=COS(RK_K*LD_K), &
  RM(2,6)=SIN(RK_K*LD_K)*DISP_K/RK_K/BETA, &
  RM(3,3)=1, RM(3,4)=LD_K, &
  RM(4,3)=0, RM(4,4)=1, &
  RM(5,1)=-SIN(RK_K*LD_K)*DISP_K/RK_K/BETA, &
  RM(5,2)=-(1-COS(RK_K*LD_K))*DISP_K/RK_K/RK_K/BETA, &
  RM(5,5)=1.0, &
  RM(5,6)=(-(LD_K-SIN(RK_K*LD_K)/RK_K)*DISP_K*DISP_K/RK_K/RK_K+ &
  LD_K/GAMMA/GAMMA)/BETA/BETA, &
  RM(6,6)=1.0

 b: vkicker
 DEFLECTOR_k: line(b,5*(DEFLECTOR_K_SEC,b))
!-------------------------------------------------------
!--------------TRANSFER---------------------------------
TRANSPORT: SUBROUTINE

     USE, TRANSFER

     INITIAL: BETA0, &            ! for Transfer
                 BETX=10, ALFX=0, MUX=0, &
                 BETY=10, ALFY=0, MUY=0, &
                 DX=0. , DY=0., &
                 x=0.0, y=0.005, px=0.0,  pt=0.
                TWISS, BETA=INITIAL, tape=twiss.txt, save=twiss    ! for Transfer
                  plot,style=100,haxis=s,vaxis=x,y, colour=100

  Select, optics, full
  optics, beta=initial, file = "optics.txt", col= s, y       

 ENDSUBROUTINE
!------------PLOT---------------------------------------------
!-------------------------------------------------------------
PLOT: SUBROUTINE
  twiss, tape=twiss, save=twiss, deltap=0.0   !  periodische  Lösung
!
       plot style=100, haxis=s, vaxis=x,y,  colour=100
        plot style=100, haxis=s, vaxis=betx,bety, colour=100
!       plot style=100, haxis=s, vaxis=mux,muy, colour=100
       plot style=100, haxis=s, vaxis=DX,DY, colour=100
        plot  style=100, haxis=s, vaxis=D, colour=100
        plot style=100, haxis=s, vaxis=xenv, colour=100, vmin=0
      plot style=100, haxis=s, vaxis= sigy, colour=100, vmin=0

 ENDSUBROUTINE
!-------------Matching---------------------------------------
!------------------------------------------------------------
MATCHING: SUBROUTINE
!
  CELL
   weight, betx=10.0
   VARY, NAME=Q1[K1], STEP=0.01
   vary, name=Q2[K1], step=0.01
  CONSTRAINT,#e, MUY=2.59 ,mux=2.59
 simplex,CALLS=3000,TOLERANCE=1E-8
 ENDMATCH
!
 ENDSUBROUTINE
!-------------------------------------------------------------
!---------------Arbeitspunkt----------------------------------
ARDI: SUBROUTINE
             twiss,tunes  ,deltap=0,0.0
            plot table=tunes,symbol=4 ,haxis=QX, vaxis=QY,&
             HMIN=2, hmax=3, vmin=2, vmax=3,ntmax=4 , &
            QCOND1= "ks", 0,0,0

ENDSUBROUTINE
!-----------------------------------------------------------
!---------------------------Tracking------------------------
TRACKING: SUBROUTINE
 TRACK
 !start, x=0.0, y=0.0, Deltap=0  !0.01*beta
 start, T=1/beta, x=0.000
 run, Method=transport, turns=747, table=track
 plot  haxis=T, vaxis=PT, multiple table=track, symbol=3
 endtrack
 ENDSUBROUTINE
!-----------------------------------------------------------
!
! **************beam line-DEFINITION*********************
D1_seg: Drift, L=0.14
D1: line=(10*D1_seg)   ! Drift 1.4 m
! douplett
skalierung=1.059599 !  Skalierfaktor von Tosca
Q1: Quadrupole, L=0.2, k1=5.511707  !-----------Q1------
D2: Drift, L=0.15
Q2: Quadrupole, L=0.2, k1=-6.90466   !-----------Q2------
douplett: line=(Q1,d2,Q2)
!
D3: Drift, L=0.2
! DEFLECTOR_K
D4_seg: Drift, L=0.11
D4: line=(10*D4_seg)
! DEFLECTOR
D5_seg: Drift, l=0.5/3
D5: line=(3*D5_seg)
! DEFLECTOR
! D4
! DEFLECTOR_K
! D3
! -douplett
! D1


 ring_4: line=(D1,douplett,D3,DEFLECTOR_K,d4,DEFLECTOR, &
               D5,DEFLECTOR,D4,DEFLECTOR_K,D3,-douplett,D1)


ring_4f: line=(D1,douplett,D3,DEFLECTOR_K,d4,DEFLEKTOR_f, &
               D5,DEFLECTOR,D4,DEFLECTOR_K,D3,-douplett,D1)

 ring_f: line=(ring_4f , -ring_4, ring_4, -ring_4)


  transfer: line=(ring_4, -ring_4, ring_4, -ring_4)

! resonator: rfcavity, volt=10/1e6, harmon=1

 ring: line=(ring_4 , -ring_4, ring_4, -ring_4)

 !****************END BEAMLINE DEFINITION*************************

 use, ring

! CALLSUBROUTINE MATCHING
  CALLSUBROUTINE PLOT
 CALLSUBROUTINE ARDI
! CALLSUBROUTINE TRACKING


! callsubroutine  TRANSPORT


 STOP
